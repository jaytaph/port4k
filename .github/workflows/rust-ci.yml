name: Rust CI

on:
  push:
    paths:
      - "**/*.rs"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/rust-ci.yml"
      - "migrations/**"
  pull_request:
    paths:
      - "**/*.rs"
      - "Cargo.toml"
      - "Cargo.lock"
      - "migrations/**"

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta]
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: "-D warnings"
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/port4k_test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: port4k_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Show rustc/cargo versions
        run: |
          rustc -V
          cargo -V

      - name: Format (rustfmt)
        run: cargo fmt --all -- --check

      - name: Lint (clippy)
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Optional: run DB migrations if you keep them in ./migrations via refinery
      - name: Install refinery_cli (optional)
        run: cargo install refinery_cli || true

      - name: Run migrations (optional)
        if: hashFiles('migrations/**') != ''
        run: refinery migrate -e "$DATABASE_URL" -p migrations

      - name: Test
        run: cargo test --all --all-features --verbose
