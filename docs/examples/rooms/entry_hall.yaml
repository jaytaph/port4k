version: 2
id: entry
name: Entry Hall
short: "A small, quiet room lit by phosphor glow."
description: |
  The room is narrow and still, its curved walls lined with pale panels that pulse faintly with phosphorescent light. The glow casts long shadows across the floor, where fine dust has gathered in the seams of the metal plates. A faint hum from hidden conduits echoes in the silence, broken only by the occasional drip of condensation from overhead pipes.

  To the north, a {o:blast_door} blocks further passage. A {o:wall_console} beside it blinks weakly. Near the corner, a {o:toolkit} lies half-buried in dust. Etched into the wall are faint {o:markings}.

# Free-form room KV available to Lua and UI
state:
  ambience: "low_hum"
  dust_level: "high"

hints:
  - text: "The blast door might be locked; perhaps there's a way to unlock it."
    when: first_look
    once: true
  - text: "The console looks damaged but might still be usable."
    when: enter
    cooldown: 3
  - text: "The toolkit could contain useful items."
    when: search
    once: true
  - text: "Try: 'enter 4312 on console' after powering it."
    when: after_fail        # e.g., after a wrong 'enter' attempt
    cooldown: 2

objects:
  - id: blast_door
    nouns: ["door","blast door"]
    short: "sealed blast door"
    description: "A heavy composite barrier with old scoring along the seams."
    flags: ["overlay","non_stackable"]   # keeps door visible even if another overlay exists
    visible: always
    state:
      locked: true
      powered: true
      revealed: true
    controls:
      - exit:north.locked                 # keep exit lock in sync with this door
    examine: "The locking mechanism is intact; manual overrides are scarred but functional."
    use: |
      return function(ctx)
        local exit = "north"
          
        if ctx.intent.verb == "open" then
            if not ctx.room.exits[exit] then
                ctx:say("There is no door here to open.")
            end
            if ctx.object.locked then
                ctx:say("The door is locked tight.")
                return true
            end
            if ctx.object.locked == false then
                ctx:say("It's already open.")
                return true
            end
            ctx:say("Hydraulics hiss as the blast door slides open.")
            ctx:set_exit_locked(exit, false)
            return true
    
        elseif ctx.intent.verb == "close" then
            if ctx:is_exit_locked(exit) == true then
                ctx:say("It's already closed.")
                return true
            end
            ctx:say("The blast door rumbles shut.")
            ctx:set_exit_locked(exit, true)
            return true
        end
    
        return false
      end

  - id: wall_console
    nouns: ["console","terminal","panel"]
    short: "flickering wall console"
    description: "A recessed maintenance terminal with a cracked display."
    flags: []
    visible: always
    state:
      powered: false
      code_required: "4312"
      revealed: true
    examine: "Power is intermittent; a maintenance login prompt flickers in and out."
    use: |
      -- Supported inputs:
      --   use console
      --   power console with <item>
      --   enter <code> on console
      return function(ctx)
        local powered = ctx.object.state.powered
        if not powered then
          if verb == "power" and ctx:has_item("microcell") then
            ctx:set_object_state("wall_console","powered", true)
            ctx:consume_item("microcell")
            ctx:say("You slot the microcell. The console hums to life.")
            return true
          else
            ctx:say("The console is dead. You might power it with a microcell.")
            return true
          end
        end

        if verb == "enter" and #args > 0 then
          local code = table.concat(args, " ")
          local required = ctx.object.code_required or "4312"
          if code == required then
            ctx:say("Code accepted. Releasing blast door locks.")
            ctx:set_object_state("blast_door","locked", false)
          else
            ctx:say("ACCESS DENIED.")
            ctx:hint_trigger("after_fail")    -- lets the engine consider an after_fail hint
          end
          return true
        end

        if verb == "use" then
          ctx:say("The console awaits a code. Try: enter <code> on console")
          return true
        end

        return false
      end

  - id: toolkit
    nouns: ["toolkit","tools","case"]
    short: "discarded toolkit"
    description: "A battered case; one latch is broken."
    flags: []
    visible: when_revealed
    state:
      revealed: true
    examine: "Inside: a multi-spanner, fiber probe, and a microcell."
    loot:
      items:
        - "multi_spanner"
        - "fiber_probe"
        - "microcell"         # charged, for a simple first-room loop
      credits: 0
      once: true

  - id: markings
    nouns: ["markings","symbols","etchings"]
    short: "etched markings"
    description: "Jagged symbols carved into the wall paint."
    flags: []
    visible: always
    state:
      revealed: true
    examine: "The symbols loosely match hazard glyphs for 'pressure loss' and 'quarantine'."

exits:
  - dir: north
    to: "hallway_1"
    description: "A reinforced corridor beyond the door."
    locked: true
    visible_when_locked: true

scripts:
  on_first_enter: |
    return function(ctx)
      ctx:say("*************  FIRST TIME THE HALL  *************")
    end
  on_enter: |
    return function(ctx)
      ctx:say("*************  YOU ARE AGAIN ENTERING THE HALL  *************")
      if not ctx.room.objects["wall_console"].state.powered then
        ctx:say("The console flickers once and dies. It might need a power source.")
      end
      ctx:hint_consider("enter")    -- engine may surface an 'enter' hint
    end

  on_command: |
    -- Allow "read markings"
    return function(ctx, verb, args)
      if verb == "read" and ctx:matches_noun(args, {"markings","symbols","etchings"}) then
        ctx:say("The symbols resemble hazard glyphs: 'pressure loss' and 'quarantine'.")
        return true
      end
      return false
    end


# Optional: inline item catalog (skip if you have a global one)
items_catalog:
  - id: multi_spanner
    name: "Multi-Spanner"
    stackable: false
  - id: fiber_probe
    name: "Fiber Probe"
    stackable: false
  - id: microcell
    name: "Microcell"
    stackable: true
