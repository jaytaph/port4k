version: 5
id: cell_block
name: Cell Block
short: "A narrow detention cell with failing systems."
description: |
  The cell is cramped and utilitarian, its walls lined with reinforced panels that hum faintly with residual charge. A flickering {o:force_field} crackles across the doorway to the north, its emitters sputtering as power fluctuates. The air is stale and metallic.
  
  A {o:guard_console} beside the field blinks weakly, its screen fractured. In the corner, a {o:maintenance_kit} lies discarded - perhaps left behind when the guards evacuated. Scratched into the wall are crude {o:markings}.

state:
  ambience: "low_hum"
  dust_level: "high"
  cell_status: "abandoned"

hints:
  - id: force_field_active
    text: "The force field is powered by the guard console. Find a way to override it."
    when: first_look
    once: true
  - id: console_needs_power
    text: "The console needs a power sourceâ€”check the maintenance kit."
    when: enter
    cooldown: 3
  - id: kit_items
    text: "The maintenance kit could contain useful items."
    when: search
    once: true
  - id: code_hint
    text: "The scratched markings on the wall might be important..."
    when: search
    once: true
  - id: console_code_help
    text: "Try: 'enter 4312 on console' after powering it."
    when: after_fail
    cooldown: 2

objects:
  - id: force_field
    nouns: ["field", "force field", "barrier", "doorway", "forcefield"]
    short: "crackling force field"
    description: "A shimmering energy barrier across the cell exit, weakening with each flicker."
    state:
      active: true
      powered: true
    controls:
      - exit:north.locked
    examine: "The emitters spark erratically. Whoever powered this down in a hurry didn't do it cleanly."
    on_use: |
      return function(ctx)
        local verb = ctx.intent.verb
        
        if verb == "deactivate" or verb == "disable" or verb == "off" then
          if not ctx.object.state.active then
            port4k.say("The field is already down; the doorway stands open.")
            return true
          end
          
          local console = ctx.room.objects.guard_console
          if console.state.unlocked then
            port4k.set_object_state("force_field", "active", false)
            port4k.set_exit_locked("north", false)
            port4k.emit_room("The field collapses with a descending whine. The doorway is clear.")
            return true
          else
            port4k.say("The field won't respond. You need to unlock the guard console first.")
            return true
          end
        end
        
        if verb == "touch" or verb == "cross" then
          if ctx.object.state.active then
            port4k.say("You pull your hand back as the field crackles menacingly. Not a good idea.")
            return true
          end
        end
        
        return false
      end

  - id: guard_console
    nouns: ["console", "terminal", "panel", "guard console"]
    short: "damaged guard console"
    description: "A small security terminal with a cracked display and exposed wiring."
    state:
      powered: false
      unlocked: false
      code_required: "4312"
    examine: "The screen flickers: {c:bright_white:bright_red}LOCKDOWN ACTIVE{c}. It needs power to accept commands."
    on_use: |
      return function(ctx)
        local verb = ctx.intent.verb
        local args = ctx.intent.args or {}
        
        -- Power the console
        if verb == "power" and port4k.player_has_item("microcell") then
          port4k.consume_item("microcell")
          port4k.set_object_state("guard_console", "powered", true)
          port4k.say("You slot the microcell into the exposed port. The console flickers to life:")
          port4k.say("{c:cyan}SECURITY OVERRIDE REQUIRED - ENTER CODE{c}")
          return true
        end
        
        if not ctx.object.state.powered then
          port4k.say("The console is dead. Maybe power it with a microcell.")
          return true
        end
        
        -- Enter code
        if verb == "enter" and #args > 0 then
          local code = table.concat(args, " ")
          if code == ctx.object.state.code_required then
            port4k.set_object_state("guard_console", "unlocked", true)
            port4k.say("{c:green}OVERRIDE ACCEPTED - FORCE FIELD CONTROLS UNLOCKED{c}")
            port4k.say("You can now deactivate the force field.")
          else
            port4k.say("{c:bright_white:bright_red}ACCESS DENIED{c}")
            port4k.hint_trigger("after_fail")
          end
          return true
        end
        
        if verb == "use" then
          port4k.say("The console awaits a security code. Try: enter <code> on console")
          return true
        end
        
        return false
      end

  - id: maintenance_kit
    nouns: ["kit", "maintenance kit", "tools", "case"]
    short: "discarded maintenance kit"
    description: "A battered tool case with a broken latch, left behind in haste."
    flags:
      revealed: true
    examine: "Inside: a multi-spanner, fiber probe, and a charged microcell."
    loot:
      items:
        - "multi_spanner"
        - "fiber_probe"
        - "microcell"
      credits: 0
      once: true

  - id: markings
    nouns: ["markings", "scratches", "graffiti", "symbols"]
    short: "scratched markings"
    description: "Desperate tallies and a scrawled number sequence."
    flags:
      revealed: true
    examine: "Among the marks, someone scratched: '4-3-1-2' and below it, 'GUARDS GONE - POWER FAILURE'."

exits:
  - dir: north
    to: "maintenance_corridor"
    description: "Beyond the force field: a dimly lit corridor."
    locked: true
    visible_when_locked: true
    flavor_locked: "The crackling force field blocks your escape."
    flavor_unlocked: "The doorway stands open, leading to the ship's maintenance corridor."

scripts:
  on_enter: |
    return function(ctx)
      if ctx.room.objects.guard_console.state.powered == false then
        port4k.say("The guard console flickers weakly. It needs power.")
      end
      
      if ctx.room.objects.force_field.state.active then
        port4k.say("The force field crackles menacingly across the doorway.")
      end
      
      port4k.hint_consider("enter")
    end
    
  on_command: |
    return function(ctx)
      local noun = ctx.intent.args[2] or ""
      local valid_nouns = {"markings", "scratches", "graffiti", "symbols"}
      
      if ctx.intent.args[1] == "read" then
        for _, valid in ipairs(valid_nouns) do
          if noun == valid then
            port4k.say("Among the desperate tallies, you clearly read: '4-3-1-2' and 'GUARDS GONE - POWER FAILURE'.")
            return true
          end
        end
      end
      
      return false
    end

items_catalog:
  - id: multi_spanner
    name: "Multi-Spanner"
    nouns: ["spanner", "multi-spanner", "tool", "wrench"]
    short: "versatile multi-spanner"
    description: "A worn but functional tool with multiple heads for various fasteners."
    examine: "The spanner shows signs of heavy use but remains reliable. It could be useful for mechanical repairs."
    stackable: false

  - id: fiber_probe
    name: "Fiber Probe"
    nouns: ["probe", "fiber-probe", "fiber", "cable-tester"]
    short: "optical fiber probe"
    description: "A slender diagnostic tool for testing optical connections."
    examine: "The probe's tip glows faintly, indicating it's still charged and ready to test fiber-optic cables."
    stackable: false

  - id: microcell
    name: "Microcell"
    nouns: ["microcell", "cell", "battery", "power-cell"]
    short: "charged microcell"
    description: "A compact power source, still holding a charge."
    examine: "The indicator shows it's fully charged. It could power small devices."
    stackable: true
