version: 5
id: hallway_1
name: Reinforced Hallway
short: "A narrow corridor with ribbed plating and emergency beacons."
description: |
  The corridor runs east–west with ribbed deck plating underfoot. Emergency beacons strobe a dull red, throwing staccato shadows between support struts. The air smells faintly of burnt insulation.

  Overhead, a {o:power_conduit} snakes along the ceiling, its casing cracked. On the eastern bulkhead, a recessed {o:access_panel} sits beside a hardened {o:east_door}. To the west, the passage opens toward dim observation ports. The way back {o:south_exit} leads to the Entry Hall.

kv:
  ambience: "alarm_beacons"
  grid_section: "A-3"

hints:
  - id: power_conduit
    text: "The power conduit looks damaged—try repairing it with proper tools."
    when: first_look
    once: true
  - id: corridor
    text: "If the corridor has power, access panels may accept diagnostics probes."
    when: enter
    cooldown: 2
  - id: door
    text: "A hardened east door likely ties into the access panel's security relays."
    when: enter
  - id: beacon
    text: "Emergency beacons suggest the main grid is offline or bypassed."
    when: manual
  - id: tools
    text: "If you found tools in the previous room, they might help here."
    when: search
    once: true

objects:
  - id: power_conduit
    nouns: ["conduit","power conduit","cable","wiring"]
    short: "fractured power conduit"
    description: "A segmented power trunk with heat-blistered casing and exposed couplings."
    state:
      powered: false
      damaged: true
    controls:
      - object:access_panel.online
    examine: "Couplings are warped; some segments could be reseated with the right spanner."
    on_use: |
      -- Repair with multi_spanner → restore corridor power
      return function(ctx, verb, args)
        if verb == "repair" or (verb == "use" and ctx:matches_noun(args or {}, {"conduit","power conduit"})) then
          local damaged = ctx:get_object_state("power_conduit","damaged")
          if not damaged then
            ctx:say("The conduit is already stable; power hums through the trunk.")
            return true
          end
          if ctx:has_item("multi_spanner") then
            ctx:set_object_state("power_conduit","damaged", false)
            ctx:set_object_state("power_conduit","powered", true)
            ctx:emit_room("With a metallic thunk, couplings seat and the corridor lights surge to steady white.")
            -- If your engine wires 'controls', it can flip access_panel.online automatically;
            -- otherwise on_enter below keeps it in sync.
          else
            ctx:say("You need a multi-spanner to reseat the warped couplings.")
          end
          return true
        end
        return false
      end

  - id: access_panel
    nouns: ["panel","access panel","maintenance panel","console"]
    short: "recessed access panel"
    description: "A lockout panel with diagnostics pins and a tiny status display."
    state:
      online: false
      bypassed: false
    controls:
      - exit:east.locked
      - object:east_door.locked
    examine: "Its status light is dark; without corridor power, the panel is inert."
    on_use: |
      -- Use fiber_probe to bypass when powered; unlock east exit
      return function(ctx, verb, args)
        local online = ctx:get_object_state("power_conduit","powered") and (not ctx:get_object_state("power_conduit","damaged"))
        if verb == "use" or verb == "hack" or verb == "bypass" then
          if not online then
            ctx:say("The panel is dead. Restore corridor power first.")
            return true
          end
          if ctx:get_object_state("access_panel","bypassed") then
            ctx:say("The panel already shows a green bypass indicator.")
            return true
          end
          if ctx:has_item("fiber_probe") then
            ctx:set_object_state("access_panel","bypassed", true)
            ctx:say("You bridge the diagnostics pins with the fiber probe. Relays click behind the bulkhead.")
            ctx:set_exit_locked("east", false)
            ctx:set_object_state("east_door","locked", false)
          else
            ctx:say("A fine diagnostics probe could bridge the pins… if only you had one.")
          end
          return true
        end
        return false
      end

  - id: east_door
    nouns: ["door","east door","bulkhead"]
    short: "hardened east door"
    description: "A thick composite bulkhead door with impact scarring."
    flags:
      locked: true
    controls:
      - exit:east.locked
    examine: "No handles—purely powered from the panel. A manual release slot is sealed."
    on_use: |
      return function(ctx, verb, _)
        if verb == "open" then
          if ctx:get_object_state("east_door","locked") then
            ctx:say("Locked. The panel controls must be engaged.")
          else
            ctx:say("Servos whine as the east door retracts into the bulkhead.")
          end
          return true
        end
        return false
      end

  - id: south_exit
    nouns: ["south","entry hall","hall"]
    short: "way south"
    description: "The corridor narrows back toward the Entry Hall."
    examine: "Faint phosphor light leaks in from the Entry Hall."

exits:
  - dir: south
    to: "entry"
    description: "Back to the phosphor-lit Entry Hall."
    locked: false
    visible_when_locked: true

  - dir: east
    to: "maintenance_bay"
    description: "A sealed passage leading into a maintenance bay."
    locked: true
    visible_when_locked: true

  - dir: west
    to: "observation_nook"
    description: "A dim alcove with viewport slits."
    locked: false
    visible_when_locked: true

  - dir: north
    to: "ship_airlock"
    description: "The corridor continues to the ship's airlock."
    locked: false
    visible_when_locked: true

scripts:
  on_enter: |
    return function(ctx)
      local powered = ctx:get_object_state("power_conduit","powered") and (not ctx:get_object_state("power_conduit","damaged"))
      if not powered then
        ctx:say("Red beacons strobe; the main lights remain dark. The conduit above you crackles softly.")
        ctx:set_object_state("access_panel","online", false)
      else
        ctx:set_object_state("access_panel","online", true)
        ctx:say("Steady white strips light the hallway. The access panel display wakes with a soft tone.")
      end
    end

  on_command: |
    -- Small QoL verbs
    return function(ctx, verb, args)
      if verb == "scan" then
        local powered = ctx:get_object_state("power_conduit","powered") and (not ctx:get_object_state("power_conduit","damaged"))
        if powered then
          ctx:say("Scan: grid nominal; east door linked to local panel; west passage shows no hazards.")
        else
          ctx:say("Scan: low power; conduit damage detected overhead.")
        end
        return true
      end
      return false
    end