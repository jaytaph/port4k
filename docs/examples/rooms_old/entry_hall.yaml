version: 5
id: entry
name: Entry Hall
short: "A small, quiet room lit by phosphor glow."
description: |
  The room is narrow and still, its curved walls lined with pale panels that pulse faintly with phosphorescent light. The glow casts long shadows across the floor, where fine dust has gathered in the seams of the metal plates. A faint hum from hidden conduits echoes in the silence, broken only by the occasional drip of condensation from overhead pipes.

  To the north, a {o:blast_door} blocks further passage. A {o:wall_console} beside it blinks weakly. Near the corner, a {o:toolkit} lies half-buried in dust. Etched into the wall are faint {o:markings}.

# Free-form room KV available to Lua and UI
state:
  ambience: "low_hum"
  dust_level: "high"

hints:
  - id: blast_door_locked
    text: "The blast door might be locked; perhaps there's a way to unlock it."
    when: first_look
    once: true
  - id: console_damaged
    text: "The console looks damaged but might still be usable."
    when: enter
    cooldown: 3
  - id: toolkit_items
    text: "The toolkit could contain useful items."
    when: search
    once: true
  - id: console_code_help
    text: "Try: 'enter 4312 on console' after powering it."
    when: after_fail        # e.g., after a wrong 'enter' attempt
    cooldown: 2

objects:
  - id: blast_door
    nouns: ["door","blast door"]
    short: "sealed blast door"
    description: "A heavy composite barrier with old scoring along the seams."
    state:
      locked: true
      powered: true
    controls:
      - exit:north.locked                 # keep exit lock in sync with this door
    examine: "The locking mechanism is intact; manual overrides are scarred but functional."
    on_use: |
      return function(ctx)
        local exit = "north"
          
        if ctx.intent.verb == "open" then
            if ctx.object.state.locked == true then
                port4k.say("The blast door is locked tight.")
                return true   
            end
      
            if ctx.object.state.locked == false then
                port4k.say("It's already open.")
                return true
            end
      
            port4k.say("Hydraulics hiss as the blast door slides open.")
            port4k.set_exit_locked(exit, false)
            return true
    
        elseif ctx.intent.verb == "close" then
            if ctx.room.exits.north.locked == true then
                port4k.say("It's already closed.")
                return true
            end
      
            port4k.say("The blast door rumbles shut.")
            port4k.set_exit_locked(exit, true)
            return true
        end
    
        return false
      end

  - id: wall_console
    nouns: ["console","terminal","panel"]
    short: "flickering wall console"
    description: "A recessed maintenance terminal with a cracked display."
    state:
      powered: false
      code_required: "4312"
    examine: "Power is intermittent; a maintenance login prompt flickers in and out."
    on_use: |
      -- Supported inputs:
      --   use console
      --   power console with <item>
      --   enter <code> on console
      return function(ctx)
        if ctx.object.state.powered == false then
          if ctx.intent.verb == "power" and port4k.player_has_item("microcell") then
            port4k.set_object_state("wall_console","powered", true)
            port4k.consume_item("microcell")
            port4k.say("You slot the microcell. The console hums to life.")
            return true
          else
            port4k.say("The console is dead. You might power it with a microcell.")
            return true
          end
        end

        if ctx.intent.verb == "enter" and #args > 0 then
          local code = table.concat(args, " ")
          local required = ctx.object.state.code_required or "4312"
          if code == required then
            port4k.say("Code accepted. Releasing blast door locks.")
            port4k.set_object_state("blast_door","locked", false)
          else
            port4k.say("{c:bright_white:bright_red}ACCESS DENIED{c}")
            port4k.hint_trigger("after_fail")    -- lets the engine consider an after_fail hint
          end
          return true
        end

        if verb == "use" then
          port4k.say("The console awaits a code. Try: enter <code> on console")
          return true
        end

        return false
      end

  - id: toolkit
    nouns: ["toolkit","tools","case"]
    short: "discarded toolkit"
    description: "A battered case; one latch is broken."
    flags:
      revealed: true
    examine: "Inside: a multi-spanner, fiber probe, and a microcell."
    loot:
      items:
        - "multi_spanner"
        - "fiber_probe"
        - "microcell"         # charged, for a simple first-room loop
      credits: 0
      once: true

  - id: markings
    nouns: ["markings","symbols","etchings"]
    short: "etched markings"
    description: "Jagged symbols carved into the wall paint."
    flags:
      revealed: true
    examine: "The symbols loosely match hazard glyphs for 'pressure loss' and 'quarantine'."

exits:
  - dir: north
    to: "hallway_1"
    description: "A reinforced corridor beyond the door."
    locked: true
    visible_when_locked: true

scripts:
  on_enter: |
    return function(ctx)
      if ctx.room.objects.wall_console.state.powered == false then
        port4k.say("The console flickers once and dies. It might need a power source.")
      end
      port4k.hint_consider("enter")    -- engine may surface an 'enter' hint
    end
  on_command: |
    -- Allow "read markings"
    return function(ctx)
      if ctx.intent.verb == "read" and port4k.matches_noun(ctx.intent.args, {"markings","symbols","etchings"}) then
        port4k.say("The symbols resemble hazard glyphs: 'pressure loss' and 'quarantine'.")
        return true
      end
      return false
    end

# Items definitions. These are the items found in the zone (note that they should not be defined in other files)
items_catalog:
  - id: multi_spanner
    name: "Multi-Spanner"
    nouns: ["spanner", "multi-spanner", "tool", "wrench"]
    short: "versatile multi-spanner"
    description: "A worn but functional tool with multiple heads for various fasteners."
    examine: "The spanner shows signs of heavy use but remains reliable. It could be useful for mechanical repairs."
    stackable: false

  - id: fiber_probe
    name: "Fiber Probe"
    nouns: ["probe", "fiber-probe", "fiber", "cable-tester"]
    short: "optical fiber probe"
    description: "A slender diagnostic tool for testing optical connections."
    examine: "The probe's tip glows faintly, indicating it's still charged and ready to test fiber-optic cables."
    stackable: false

  - id: microcell
    name: "Microcell"
    nouns: ["microcell", "cell", "battery", "power-cell"]
    short: "charged microcell"
    description: "A compact power source, still holding a charge."
    examine: "The indicator shows it's fully charged. It could power small devices."
    stackable: true
